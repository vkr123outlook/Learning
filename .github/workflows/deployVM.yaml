# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build - Dev - VM

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o "${{env.DOTNET_ROOT}}/myapp"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  Dev:
    runs-on: windows-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_0C2FEE75B84E4A6C8AF7FB179F4C9BEA }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_B489BE8A568B486B9E17D00599EEF12D }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_3DDA30F4C843470996401A54C943C70C }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'AzureLearningDotNet'
          slot-name: 'Production'
          package: .

  VM:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'VM'

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app

      - name: Install SSH client
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Copy files to Azure VM
        run: |
          # Define variables
          VM_IP=${{ secrets.AZURE_VM_IP }}
          VM_USER=${{ secrets.AZURE_VM_USER }}
          SSH_PRIVATE_KEY=${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}

          # Copy the files from the GitHub runner to the Azure VM using SSH private key
          scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY -r ./publish/* $VM_USER@$VM_IP:/home/$VM_USER/myapp

      - name: SSH into Azure VM and restart app
        run: |
          VM_IP=${{ secrets.AZURE_VM_IP }}
          VM_USER=${{ secrets.AZURE_VM_USER }}
          SSH_PRIVATE_KEY=${{ secrets.AZURE_VM_SSH_PRIVATE_KEY }}

          # SSH into the Azure VM and restart the app or service
          ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY $VM_USER@$VM_IP <<EOF
            # Navigate to the app directory
            cd /home/$VM_USER/myapp

            # If you're using systemd, restart the service
            sudo systemctl restart myapp.service  # Ensure that the service is defined on the VM

            # Or run the app directly (if not using a service manager)
            # nohup dotnet myapp.dll &
          EOF  
